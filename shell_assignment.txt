1.1: Get-ChildItem shows the contents of the folder you are working on, such as the files that are in there, their type and the last time they have been worked on.
Get-Alias ls shows that Get-ChildItem can be used in its alias form, gci, now. When using gci it gives the same results as Get-ChildItem did earlier
1.2: Get-Help shows very broad explanations on what the command can do, such as the name, syntax and a descritption
Using Get-Help - Detailed gives a much longer and ... detailed... explanation, the command's parameters, including a bunch of examples on how it can be used
Get-ChildItem can be used to only show files with a certain extension by using Get-ChildItem -Include * .txt, to only include textfiles for example, on the flipside you can also use -Exclude* to exclude all files with a certain extension
I used gci - Filter * .txt, Get-ChildItem -fi * .txt and tried gci -r * .txt, but that did not give me anything different(which is probably as the .txt is the only file in that folder)

2.1: I'm currently working from the folder I created for this course and the subfolder for this assignment: C:\Users\User\Documents\MET2J\shell_magic
I do not see files in different colors, only commands, in which the first command is yellow, the subject white, and any additions are grey
But you can distinguish folders from files by their extension: folders do not have file extensions, files do

2.2: using set-location you can change the working directory to a different place on the drive
This uses first Set-Location C:\Users\User\Documents\Uni to move it somewhere else, then I can check it is there by running Get-Location and see where I am working on now
Then I moved this all back with sl C:\Users\User\Documents\MET2J\shell_magic and Get-Location again to see where I am now, and it is the same place I started from!

3.1: the file could not be created as "New-Item hello world, because "world" was not accepted as an argument. This probably means that spaces in file names are not working, as it assumes there are two different commands happening here, within the title of the file
This can probably be avoided by adding a hyphen or underscore between the words

3.2: To get a new folder I used New-Item hello_world -Itemtype directory, which worked and showed me the location of this file. It also showed up in the file explorer.

3.3 : Creating a file hello_world in the shell_magic folder did not work, probably as there is already a folder of the same name in that directory.
Naming the empty file hello_world.bfe worked, as this gives it a different name than the folder has.
Renaming this file I used Rename-Item hello_world.bfe hello_world.txt
Moving it to the folder hello_world through Move-Item hello_world.txt -Destination hello_world
Moving it back took some more steps (for some reason?) and I used the command  Move-Item C:\Users\User\Documents\MET2J\shell_magic\hello_world\hello_world.txt -Destination C:\Users\User\Documents\MET2J\shell_magic
To move it back and forth again I used: 
Set-Location C:\Users\User\Documents\MET2J\shell_magic\hello_world
Move-Item ..\hello_world.txt
Move-Item .\hello_world.txt -destination ..\shell_magic\hello_world.txt

3.4: Copying a file makes a copy of it, so you have two of them, possibly in different locations
After setting my working directory back to shell_magic I used Copy-Item .\hello_world.txt -Destination .\hello_world\hello_world.txt to add a copy to the hello_world folder
To rename it in there I just used Copy-Item .\hello_world.txt -Destination .\hello_world\world_hello.txt

3.5: To remove the file in \shell_magic I used Remove-Item .\hello_world.txt, and it was gone
Then I removed the file in the \hello_world folder with Remove-Item .\hello_world\hello_world.txt
When just typing Remove-Item .\hello_world I need to confirm that I want to delete this folder and can agree with typing J for yes, or N for no

4.1: Get-Content -Path .\shell_assignment.txt shows the whole content of that file, just as it does in this textfile. Useful? Maybe?
For the new file hello_world.txt I used Get-Content -Path .\hello_world.txt which shows absolutely nothing. That makes sense as that file is also completly empty

4.2: Write-Output works like the pipe does in R and sends an object from one line of commands into the next one, so using the output of the first command (before the >) for the second command (behind the >)
using echo 'file contents' > .\file.txt added the line 'file contents' to that file. So i guess it worked as expected
Adding more text with echo  'more text'>> .\file.txt also worked

4.3: I then created a new item home_contents.list and added a list of the contents in my directory in there with gci > .\home_contents.list
both gc home-contents.list and gc home_contents.list | oh -p gave me the output paged, which is a lot easier to go through. So using oh -p is very helpful when looking through files or directories with a lot of output, as it does not clutter up the terminal as much. 

5.1: Does what the name implies: gives you the summary of the file, including numeric properties of objects, characters, words, and lines, in objects
Just doing Measure Object file.txt -word does not work and gives nothing.
Get-Content .\file.txt |measure -word then gives you the words in the file!
| uses the output of Get-Content, so the text that is written in the file and pipes it through the measure command, which then counts the words. A similar thing happened in 4.3, where it piped the content of the list through the oh -p command
gci | measure shows the number of files in my working directory, but it ignores the folder of git which is fun

5.2: echo 'hello world' 'world hello' > helloworld.txt added a new item with the name helloworld to the working directory with both lines in seperate lines within it!
sls is like Ctrl+F and finds stuff within your files, or after trying it with sls 'world' .\helloworld.tx it prints the lines that include the word 'world' in the file. So in this case it just gave me the two lines we have in the file!
I made a new file with the content 'world hello' using echo 'world hello' > worldhello.txt. I then searched the new and old file using the command sls 'hello' .\helloworld.txt, .\worldhello.txt, which then showed me all 3 lines that included the word 'hello'. It also shows in which file it was found and which line it was in
with the gci function you can also get all files that have the word 'hello' in their name with Get-ChildItem | Select-Object FullName | Select-String 'hello', which is nice but not really useful
More useful you can also do Get-ChildItem | Select-Object DirectoryName which gives you the directories for all the files in the working directory (they are all the same, so also not super useful), you can also see the creation time of the files, the last accesses time, length of the file
There are a bunch of other options in both the help page and when you press tab. I just pressed tab and tried a few to see what tehy did!

5.3: To find occurences of 'hello' I used the command >sls 'hello' .\helloworld.txt
Piping all the commands together
gc .\helloworld.txt |sls 'world' | measure -word | oh -p gives the output 4, which is the number of words in the lines that include the word hello throughout the file. oh -p does not really change anything, as the output is this small anyways.

6.1 curl http://cli.ucudata.nl/aup.tar.gz > .\ucudata.aup.tar.gz downloaded the data from the website! (there was something wrong with this set so I manually downloaded it and used it in the following steps)

6.2: tar.exe -xf .\aup.tar.gz unpacked the data and moved it into a new folder

6.3: gci .\aup -r -fil *.aup filters out all the individual files within the folder and all it subfolders
C:\Users\User\Documents\MET2J\shell_magic\aup\cohort3\s274fhum is the lowest level at which data is stored. 
gc C:\Users\User\Documents\MET2J\shell_magic\aup\cohort3\s274fhum\s274fhum.aup |oh -p opens one of the files and shows that there is a bunch of numbers in there, which include a lens, a min, a max and a rms value
To find out how many files .aup are in the folder I used the pipe: gci .\aup -r -filter *.aup |measure, which showed me there are 964 files.aup in this folder!



 

